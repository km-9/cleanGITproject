/*Mat image1;
bool backprojMode1 = false;
bool selectObject1 = false;
int trackObject = 0;
bool showHist1 = true;
Point origin1;
Rect selection1;
int vmin1 = 10, vmax1 = 256, smin1 = 30;
int trackTarget(Rect target){
  selection1 = target;
  Rect trackWindow;
  int hsize = 16;
  float hranges[] = {0,180};
  const float* phranges = hranges;
  Mat frame, hsv, hue, mask, hist, histimg = Mat::zeros(200, 320, CV_8UC3), backproj;
  bool paused = false;
  for(;;)
  {
      if( !paused )
      {
          cap >> frame;
          if( frame.empty() )
              break;
      }
      frame.copyTo(image1);
      if( !paused )
      {
          cvtColor(image1, hsv, COLOR_BGR2HSV);
          if( trackObject )
          {
              int _vmin1 = vmin1, _vmax1 = vmax1;
              inRange(hsv, Scalar(0, smin1, MIN(_vmin1,_vmax1)),
                      Scalar(180, 256, MAX(_vmin1, _vmax1)), mask);
              int ch[] = {0, 0};
              hue.create(hsv.size(), hsv.depth());
              mixChannels(&hsv, 1, &hue, 1, ch, 1);
              if( trackObject < 0 )
              {
                  // Object has been selected by user, set up CAMShift search properties once
                  Mat roi(hue, selection1), maskroi(mask, selection1);
                  calcHist(&roi, 1, 0, maskroi, hist, 1, &hsize, &phranges);
                  normalize(hist, hist, 0, 255, NORM_MINMAX);
                  trackWindow = selection1;
                  trackObject = 1; // Don't set up again, unless user selects new ROI
                  histimg = Scalar::all(0);
                  int binW = histimg.cols / hsize;
                  Mat buf(1, hsize, CV_8UC3);
                  for( int i = 0; i < hsize; i++ )
                      buf.at<Vec3b>(i) = Vec3b(saturate_cast<uchar>(i*180./hsize), 255, 255);
                  cvtColor(buf, buf, COLOR_HSV2BGR);
                  for( int i = 0; i < hsize; i++ )
                  {
                      int val = saturate_cast<int>(hist.at<float>(i)*histimg.rows/255);
                      rectangle( histimg, Point(i*binW,histimg.rows),
                                 Point((i+1)*binW,histimg.rows - val),
                                 Scalar(buf.at<Vec3b>(i)), -1, 8 );
                  }
              }
              // Perform CAMShift
              calcBackProject(&hue, 1, 0, hist, backproj, &phranges);
              backproj &= mask;
              RotatedRect trackBox = CamShift(backproj, trackWindow,
                                  TermCriteria( TermCriteria::EPS | TermCriteria::COUNT, 10, 1 ));
              if( trackWindow.area() <= 1 )
              {
                  int cols = backproj.cols, rows = backproj.rows, r = (MIN(cols, rows) + 5)/6;
                  trackWindow = Rect(trackWindow.x - r, trackWindow.y - r,
                                     trackWindow.x + r, trackWindow.y + r) &
                                Rect(0, 0, cols, rows);
              }
              if( backprojMode1 )
                  cvtColor( backproj, image1, COLOR_GRAY2BGR );
              ellipse( image1, trackBox, Scalar(0,0,255), 3, LINE_AA );
          }
      }
      else if( trackObject < 0 )
          paused = false;
      if( selectObject1 && selection1.width > 0 && selection1.height > 0 )
      {
          Mat roi(image1, selection1);
          bitwise_not(roi, roi);
      }
      imshow( "CamShift Demo", image1 );
      imshow( "Histogram", histimg );
      char c = (char)waitKey(10);
      if( c == 27 )
          break;
      switch(c)
      {
      case 'b':
          backprojMode1 = !backprojMode1;
          break;
      case 'c':
          trackObject = 0;
          histimg = Scalar::all(0);
          break;
      case 'h':
          showHist1 = !showHist1;
          if( !showHist1 )
              destroyWindow( "Histogram" );
          else
              namedWindow( "Histogram", 1 );
          break;
      case 'p':
          paused = !paused;
          break;
      default:
          ;
      }
  }
  return 0;
}*/
